# -*- coding: utf-8 -*-
"""Poject 01.Coustomer Segmentaion using k-Means  .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1crYXdfXjyXu1qaihFJExuoqBNl3yLg0z

Importing The Require Dependencies
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.cluster import KMeans

"""Data Collection & Analysis """

# loading the data from csv file to Pandas DataFrame
customer_data = pd.read_csv('/Mall_Customers.csv')

# first 5 rows in the dataframe
customer_data.head()

#finding the Number of rows and Columns
customer_data.shape

customer_data.sample(10)

customer_data.describe()

#getting Some info About the Dataset
customer_data.info()

#checking for missing values
customer_data.isnull().sum()
#if we had missing values then we have to use method like  imputation

plt.figure(figsize = (12,7))
sns.histplot(x = 'Age', data = customer_data, bins = 10)

sns.countplot(x = 'Gender', data =customer_data )

customer_data['Gender'].value_counts()

plt.figure(figsize = (12,7))
sns.scatterplot(x = 'Age', y = 'Spending Score (1-100)', data = customer_data, hue = 'Gender')

plt.figure(figsize = (12,7))
sns.scatterplot(x = 'Annual Income (k$)', y = 'Spending Score (1-100)', data = customer_data, hue = 'Gender')

plt.figure(figsize = (12,7))
sns.scatterplot(x = 'Age', y = 'Annual Income (k$)', data = customer_data, hue = 'Gender')

"""Chooing the Annul Income Column & Spending Score Column for Clustring"""

X = customer_data.iloc[:,[3,4]].values

print(X)

"""**Choosing The number of Clusters**

**WCSS-> Within Cluster Sums of Squares**
"""

#finding wcss values for different number of clusters(elbo method)
wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

# plot an elbow graph

sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""Optimum Number of Clusters = 5

Training the k-Means Clustering Model
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X)

print(Y)

"""5 Clusters - 0, 1, 2, 3, 4

Visualizing all the Clusters
"""

# plotting all the clusters and their Centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

Income_spending_customer_data = customer_data.iloc[:,2:4].values
print(Income_spending_customer_data)

from sklearn.cluster import KMeans
wcss = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = "k-means++")
    kmeans.fit(Income_spending_customer_data)
    wcss.append(kmeans.inertia_)

plt.figure(figsize = (12,6))
plt.grid()
plt.plot(range(1,11), wcss, linewidth = 2, color = 'red', marker = '8')
plt.xlabel('K value')
plt.ylabel('wcss')
plt.title('Elbow Graph')
plt.show()

n_clusters = 5
kmeans = KMeans(n_clusters)
label = kmeans.fit_predict(Income_spending_customer_data)
print(label)

"""The Number of Cluster = 5
0.553931997444648

---


"""

print(kmeans.cluster_centers_)

plt.figure(figsize = (12,7))

for i in range(0 ,n_clusters):
    plt.scatter(Income_spending_customer_data[label == i, 0], Income_spending_customer_data[label == i, 1], label = 'Cluster ' + str(i + 1))
    
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], color = 'black', label = 'Centroids')

plt.title('Clusters of Customers')
plt.xlabel('Income')
plt.ylabel('Spending score(1-100)')
plt.legend()
plt.show()